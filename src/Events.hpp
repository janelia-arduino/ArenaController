//$file${.::Events.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${.::Events.hpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::Events.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef EVENTS_HPP
#define EVENTS_HPP

#include "qpcpp.hpp"
#include "constants.hpp"


//$declare${Events} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${Events::UnsignedValueEvt} ................................................
class UnsignedValueEvt : public QP::QEvt {
public:
    std::uint32_t value;
}; // class UnsignedValueEvt

//${Events::CommandEvt} ......................................................
class CommandEvt : public QP::QEvt {
public:
    void * connection;
    std::uint8_t const * binary_command;
    std::uint32_t binary_command_byte_count;
}; // class CommandEvt

//${Events::PlayPatternEvt} ..................................................
class PlayPatternEvt : public QP::QEvt {
public:
    std::uint16_t pattern_id;
    std::int16_t frame_rate;
    std::uint16_t runtime_duration;
    std::uint16_t frame_index;
}; // class PlayPatternEvt

//${Events::FrameEvt} ........................................................
class FrameEvt : public QP::QEvt {
public:
    std::uint8_t buffer[AC::constants::byte_count_per_pattern_frame_max];
}; // class FrameEvt

//${Events::ShowPatternFrameEvt} .............................................
class ShowPatternFrameEvt : public QP::QEvt {
public:
    std::uint16_t pattern_id;
    std::uint16_t frame_index;
}; // class ShowPatternFrameEvt

//${Events::AnalogClosedLoopEvt} .............................................
class AnalogClosedLoopEvt : public QP::QEvt {
public:
    std::uint16_t pattern_id;
    std::int16_t gain;
    std::uint16_t runtime_duration;
    std::uint16_t frame_index;
}; // class AnalogClosedLoopEvt

//${Events::SignedValueEvt} ..................................................
class SignedValueEvt : public QP::QEvt {
public:
    std::int32_t value;
}; // class SignedValueEvt
//$enddecl${Events} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif

<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.3" links="0">
 <documentation>This is a little more advanced ArenaController example for the Arduino DUE board. The example demonstrates:

1. One active object class &quot;ArenaController&quot; (inside the package &quot;AOs&quot;)
2. A simple state machine
3. The Board Support Package (BSP), see below.

----
# Board configuration:

The external LED needs to be connected between the pins GND and 13, with the short LEG leg at the GND pin.

----
# More info

This example demonstrates the concept of the Board Support Package (BSP), which separates the &quot;What&quot; needs to be done from &quot;How&quot; this is done. The BSP consists of two files &quot;bsp.h&quot; and &quot;bsp.cpp&quot;. The application (active objects) need to include only the &quot;bsp.h&quot; header file and the state machines call only the BSP functions, but don't interact with the hardware directly.

This structure of the code is recommended for applications with only one active object. (See also the dpp_bsp example).</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02" namespace="AC::">
  <class name="Arena" superclass="qpcpp::QActive">
   <attribute name="instance" type="Arena" visibility="0x00" properties="0x01">
    <documentation>static class instance (Singleton)</documentation>
   </attribute>
   <attribute name="frames_streamed_" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="initialize_analog_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="analog_" type="QP::QHsm *" visibility="0x00" properties="0x00"/>
   <operation name="Arena" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Arena::initial)),
    initialize_analog_time_evt_(this, INITIALIZE_ANALOG_TIMEOUT_SIG, 0U)

analog_ = Analog_getInstance();</code>
   </operation>
   <operation name="dispatchToAnalog" type="void" visibility="0x02" properties="0x00">
    <parameter name="e" type="QP::QEvt const *"/>
    <code>analog_-&gt;dispatch(e, m_prio);</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="initializeAndSubscribe()">FSP::Arena_initializeAndSubscribe(this, e);</action>
     <initial_glyph conn="28,3,4,0,4">
      <action box="1,0,28,2"/>
     </initial_glyph>
    </initial>
    <state name="ArenaOn">
     <entry brief="activateCommandInterfaces()">FSP::Arena_activateCommandInterfaces(this, e);</entry>
     <exit brief="deactivateCommandInterfaces()">FSP::Arena_deactivateCommandInterfaces(this, e);</exit>
     <initial target="../10">
      <initial_glyph conn="51,27,4,0,3">
       <action box="1,-1,18,3"/>
      </initial_glyph>
     </initial>
     <tran trig="ALL_OFF" target="../10">
      <action brief="allOffTransition()">FSP::Arena_allOffTransition(this, e);</action>
      <tran_glyph conn="10,33,3,3,23">
       <action box="1,-2,12,5"/>
      </tran_glyph>
     </tran>
     <tran trig="STREAM_FRAME" target="../11">
      <action brief="streamFrameTransition()">FSP::Arena_streamFrameTransition(this, e);</action>
      <tran_glyph conn="10,69,3,3,23">
       <action box="0,-2,17,5"/>
      </tran_glyph>
     </tran>
     <tran trig="ALL_ON" target="../9">
      <action brief="allOnTransition()">FSP::Arena_allOnTransition(this, e);</action>
      <tran_glyph conn="10,49,3,3,23">
       <action box="1,-2,16,5"/>
      </tran_glyph>
     </tran>
     <tran trig="PLAY_PATTERN" target="../12">
      <action brief="playPatternTransition()">FSP::Arena_playPatternTransition(this, e);</action>
      <tran_glyph conn="10,90,3,3,23">
       <action box="0,-2,21,4"/>
      </tran_glyph>
     </tran>
     <tran trig="INITIALIZE_ANALOG_TIMEOUT">
      <action brief="initializeAnalog()">FSP::Arena_initializeAnalog(this, e);</action>
      <tran_glyph conn="10,18,3,-1,28">
       <action box="0,-2,26,4"/>
      </tran_glyph>
     </tran>
     <tran trig="ANALOG_INITIALIZED">
      <action brief="dispatchToAnalog()">dispatchToAnalog(e);</action>
      <tran_glyph conn="10,22,3,-1,28">
       <action box="0,-2,21,4"/>
      </tran_glyph>
     </tran>
     <tran trig="SET_ANALOG_OUTPUT">
      <action brief="dispatchToAnalog()">dispatchToAnalog(e);</action>
      <tran_glyph conn="10,26,3,-1,28">
       <action box="0,-2,18,5"/>
      </tran_glyph>
     </tran>
     <tran trig="SHOW_PATTERN_FRAME" target="../13">
      <tran_glyph conn="10,117,3,3,23">
       <action box="0,-2,25,2"/>
      </tran_glyph>
     </tran>
     <state name="AllOn">
      <entry brief="fillFrameBufferWithAllOn()">FSP::Arena_fillFrameBufferWithAllOn(this, e);</entry>
      <tran trig="FRAME_FILLED">
       <action brief="displayFrame()">FSP::Arena_displayFrame(this, e);</action>
       <tran_glyph conn="33,52,3,-1,25">
        <action box="0,-2,17,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="33,44,35,17">
       <entry box="1,2,26,3"/>
      </state_glyph>
     </state>
     <state name="AllOff">
      <entry brief="deactivateDisplay()">FSP::Arena_deactivateDisplay(this, e);</entry>
      <state_glyph node="33,30,35,11">
       <entry box="1,2,22,2"/>
      </state_glyph>
     </state>
     <state name="StreamingFrame">
      <entry brief="fillFrameBufferWithDecodedFrame()">FSP::Arena_fillFrameBufferWithDecodedFrame(this, e);</entry>
      <tran trig="FRAME_FILLED">
       <action brief="displayFrame()">FSP::Arena_displayFrame(this, e);</action>
       <tran_glyph conn="33,72,3,-1,25">
        <action box="0,-2,15,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="33,64,35,18">
       <entry box="1,2,30,2"/>
      </state_glyph>
     </state>
     <state name="PlayingPattern">
      <exit brief="endPlayingPattern()">FSP::Arena_endPlayingPattern(this, e);</exit>
      <state_glyph node="33,85,35,20">
       <exit box="1,2,24,2"/>
      </state_glyph>
     </state>
     <state name="ShowingPatternFrame">
      <state_glyph node="33,108,35,23"/>
     </state>
     <state_glyph node="10,7,91,134">
      <entry box="1,2,24,2"/>
      <exit box="1,4,26,2"/>
     </state_glyph>
    </state>
    <state_diagram size="112,145"/>
   </statechart>
  </class>
  <class name="SerialCommandInterface" superclass="qpcpp::QActive">
   <attribute name="serial_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="instance" type="SerialCommandInterface" visibility="0x00" properties="0x01"/>
   <attribute name="string_response_[constants::string_response_length_max]" type="char" visibility="0x00" properties="0x00"/>
   <attribute name="binary_response_[constants::byte_count_per_response_max]" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="binary_response_byte_count_" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="binary_command_[AC::constants::byte_count_per_pattern_frame_max]" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="binary_command_byte_count_" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="binary_command_byte_count_claim_" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="runtime_duration_ms_" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <operation name="SerialCommandInterface" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;SerialCommandInterface::initial)),
    serial_time_evt_(this, SERIAL_TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../2">
     <action brief="initializeAndSubscribe()">FSP::SerialCommandInterface_initializeAndSubscribe(this, e);</action>
     <initial_glyph conn="46,8,4,0,3">
      <action box="1,0,34,3"/>
     </initial_glyph>
    </initial>
    <state name="Active">
     <entry brief="armSerialTimerLowSpeed()">FSP::SerialCommandInterface_armSerialTimerLowSpeed(this, e);</entry>
     <exit brief="disarmSerialTimer()">FSP::SerialCommandInterface_disarmSerialTimer(this, e);</exit>
     <initial target="../3">
      <initial_glyph conn="36,28,4,0,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="DEACTIVATE_SERIAL_COMMAND_INTERFACE" target="../../2">
      <tran_glyph conn="3,27,3,3,-2,-14,36">
       <action box="-1,-16,35,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SERIAL_TIMEOUT">
      <action brief="pollSerial()">FSP::SerialCommandInterface_pollSerial(this, e);</action>
      <tran_glyph conn="3,34,3,-1,18">
       <action box="0,-2,16,4"/>
      </tran_glyph>
     </tran>
     <state name="Unitialized">
      <entry brief="initializeSerial()">FSP::SerialCommandInterface_initializeSerial(this, e);</entry>
      <tran trig="SERIAL_INITIALIZED" target="../../4">
       <tran_glyph conn="71,34,1,1,16,13,-23">
        <action box="2,-3,16,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="29,32,42,10">
       <entry box="1,2,15,2"/>
      </state_glyph>
     </state>
     <state name="WaitingForNewCommand">
      <tran trig="ETHERNET_COMMAND_AVAILABLE" target="../../5">
       <tran_glyph conn="64,54,1,3,28">
        <action box="1,-2,32,3"/>
       </tran_glyph>
      </tran>
      <tran trig="SERIAL_COMMAND_AVAILABLE" target="../../6">
       <action brief="analyzeCommand()">FSP::SerialCommandInterface_analyzeCommand(this, e);</action>
       <tran_glyph conn="10,67,2,0,18">
        <action box="1,3,25,4"/>
       </tran_glyph>
      </tran>
      <tran trig="SERIAL_TIMEOUT">
       <action brief="pollSerial()">FSP::SerialCommandInterface_pollSerial(this, e);</action>
       <tran_glyph conn="7,49,3,-1,20">
        <action box="1,-2,19,4"/>
       </tran_glyph>
      </tran>
      <state name="PlayingPattern">
       <tran trig="COMMAND_PROCESSED">
        <action brief="writeBinaryResponse()">FSP::SerialCommandInterface_writeBinaryResponse(this, e);</action>
        <tran_glyph conn="17,56,3,-1,23">
         <action box="0,-2,21,4"/>
        </tran_glyph>
       </tran>
       <tran trig="PATTERN_FINISHED_PLAYING">
        <action brief="writePatternFinishedResponse()">FSP::SerialCommandInterface_writePatternFinishedResponse(this, e);</action>
        <tran_glyph conn="17,61,3,-1,28">
         <action box="0,-2,29,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="17,51,44,14"/>
      </state>
      <state_glyph node="7,44,57,23"/>
     </state>
     <state name="Waiting">
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <tran_glyph conn="92,50,3,1,-28">
        <action box="-22,-2,21,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="92,46,16,10"/>
     </state>
     <state name="ChoosingCommandProcessor">
      <tran trig="PROCESS_BINARY_COMMAND" target="../../7">
       <tran_glyph conn="29,94,2,2,2,24,-2">
        <action box="1,3,28,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PROCESS_STREAM_COMMAND" target="../../8">
       <tran_glyph conn="22,94,2,3,6,52">
        <action box="12,7,25,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="7,85,26,9"/>
     </state>
     <state name="ProcessingBinaryCommand">
      <entry brief="processBinaryCommand()">FSP::SerialCommandInterface_processBinaryCommand(this, e);</entry>
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <action brief="writeBinaryResponse()">FSP::SerialCommandInterface_writeBinaryResponse(this, e);</action>
       <tran_glyph conn="60,85,0,2,-18">
        <action box="1,-14,22,4"/>
       </tran_glyph>
      </tran>
      <tran trig="PLAY_PATTERN" target="../../4/3">
       <action brief="storeRuntimeDuration()">FSP::SerialCommandInterface_storeRuntimeDuration(this, e);</action>
       <tran_glyph conn="46,85,0,2,-20">
        <action box="-17,-10,19,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="44,85,28,9">
       <entry box="1,2,23,2"/>
      </state_glyph>
     </state>
     <state name="ProcessingStreamCommand">
      <entry brief="armSerialTimerHighSpeed()">FSP::SerialCommandInterface_armSerialTimerHighSpeed(this, e);</entry>
      <exit brief="armSerialTimerLowSpeed()">FSP::SerialCommandInterface_armSerialTimerLowSpeed(this, e);</exit>
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <action brief="writeBinaryResponse()">FSP::SerialCommandInterface_writeBinaryResponse(this, e);</action>
       <tran_glyph conn="86,76,0,2,-7,-24,-2">
        <action box="1,-6,21,5"/>
       </tran_glyph>
      </tran>
      <tran trig="SERIAL_COMMAND_AVAILABLE">
       <action brief="updateStreamCommand()">FSP::SerialCommandInterface_updateStreamCommand(this, e);</action>
       <choice>
        <guard brief="ifStreamCommandComplete()">FSP::SerialCommandInterface_ifStreamCommandComplete(this, e)</guard>
        <action brief="processStreamCommand()">FSP::SerialCommandInterface_processStreamCommand(this, e);</action>
        <choice_glyph conn="98,90,5,-1,25">
         <action box="1,0,23,4"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard brief="else"/>
        <choice_glyph conn="98,90,4,-1,13">
         <action box="1,9,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="74,86,3,-1,24,4">
        <action box="0,-2,25,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="74,76,54,40">
       <entry box="1,2,27,2"/>
       <exit box="1,4,30,4"/>
      </state_glyph>
     </state>
     <state_glyph node="3,21,127,104">
      <entry box="1,2,36,2"/>
      <exit box="1,4,34,2"/>
     </state_glyph>
    </state>
    <state name="Inactive">
     <tran trig="ACTIVATE_SERIAL_COMMAND_INTERFACE" target="../../1">
      <tran_glyph conn="55,13,1,1,79,12,-4">
       <action box="2,-2,35,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="37,11,18,7"/>
    </state>
    <state_diagram size="140,137"/>
   </statechart>
  </class>
  <class name="Display" superclass="qpcpp::QActive">
   <attribute name="instance" type="Display" visibility="0x00" properties="0x01"/>
   <attribute name="refresh_rate_hz_" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="refresh_queue_" type="QP::QEQueue" visibility="0x00" properties="0x00"/>
   <operation name="Display" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Display::initial))</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="initializeAndSubscribe()">FSP::Display_initializeAndSubscribe(this, e);</action>
     <initial_glyph conn="39,2,4,0,3">
      <action box="1,0,26,2"/>
     </initial_glyph>
    </initial>
    <state name="Initialized">
     <initial target="../2">
      <initial_glyph conn="41,10,4,0,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="SET_REFRESH_RATE">
      <action brief="setRefreshRate()">FSP::Display_setRefreshRate(this, e);</action>
      <tran_glyph conn="2,10,3,-1,24">
       <action box="0,-2,23,4"/>
      </tran_glyph>
     </tran>
     <state name="Inactive">
      <tran trig="DISPLAY_FRAME" target="../../3/1">
       <tran_glyph conn="41,20,2,0,10">
        <action box="1,1,34,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="35,13,12,7"/>
     </state>
     <state name="Active">
      <tran trig="DEACTIVATE_DISPLAY" target="../../2">
       <tran_glyph conn="7,29,3,3,-2,-14,30">
        <action box="5,-16,18,3"/>
       </tran_glyph>
      </tran>
      <state name="DisplayingFrame">
       <entry brief="armRefreshTimer()">FSP::Display_armRefreshTimer(this, e);</entry>
       <exit brief="disarmRefreshTimer()">FSP::Display_disarmRefreshTimer(this, e);</exit>
       <initial target="../2">
        <initial_glyph conn="45,38,4,0,2">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="SET_REFRESH_RATE" target="..">
        <action brief="setRefreshRate()">FSP::Display_setRefreshRate(this, e);</action>
        <tran_glyph conn="75,49,1,1,2,-12,-2">
         <action box="3,-9,18,4"/>
        </tran_glyph>
       </tran>
       <state name="WaitingToTransferFrame">
        <entry brief="recall()">FSP::Display_recall(this, e);</entry>
        <tran trig="REFRESH_TIMEOUT" target="../../3">
         <tran_glyph conn="42,47,2,0,6">
          <action box="1,2,22,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="34,40,20,7">
         <entry box="1,2,15,2"/>
        </state_glyph>
       </state>
       <state name="TransferringFrame">
        <entry brief="transferFrame()">FSP::Display_transferFrame(this, e);</entry>
        <tran trig="FRAME_TRANSFERRED" target="../../2">
         <tran_glyph conn="34,56,3,3,-5,-12,5">
          <action box="-19,1,18,2"/>
         </tran_glyph>
        </tran>
        <tran trig="REFRESH_TIMEOUT">
         <action brief="defer()">FSP::Display_defer(this, e);</action>
         <tran_glyph conn="34,60,3,-1,23">
          <action box="0,-2,16,4"/>
         </tran_glyph>
        </tran>
        <state_glyph node="34,53,33,15">
         <entry box="1,2,14,2"/>
        </state_glyph>
       </state>
       <state_glyph node="10,30,65,42">
        <entry box="1,2,25,2"/>
        <exit box="1,4,23,2"/>
       </state_glyph>
      </state>
      <state_glyph node="7,25,89,49"/>
     </state>
     <state_glyph node="2,5,97,71"/>
    </state>
    <state_diagram size="123,82"/>
   </statechart>
  </class>
  <class name="EthernetCommandInterface" superclass="qpcpp::QActive">
   <attribute name="instance" type="EthernetCommandInterface" visibility="0x00" properties="0x01"/>
   <attribute name="ethernet_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="binary_response_[constants::byte_count_per_response_max]" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="binary_response_byte_count_" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="connection_" type="void *" visibility="0x00" properties="0x00"/>
   <attribute name="binary_command_" type="std::uint8_t const *" visibility="0x00" properties="0x00"/>
   <attribute name="binary_command_byte_count_" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="binary_command_byte_count_claim_" type="std::uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="runtime_duration_ms_" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <operation name="EthernetCommandInterface" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;EthernetCommandInterface::initial)),
    ethernet_time_evt_(this, ETHERNET_TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="initializeAndSubscribe()">FSP::EthernetCommandInterface_initializeAndSubscribe(this, e);</action>
     <initial_glyph conn="62,13,4,0,4">
      <action box="1,1,20,2"/>
     </initial_glyph>
    </initial>
    <state name="Inactive">
     <tran trig="ACTIVATE_ETHERNET_COMMAND_INTERFACE" target="../../2">
      <tran_glyph conn="69,19,1,1,64,18,-2">
       <action box="1,-2,36,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="55,17,14,9"/>
    </state>
    <state name="Active">
     <entry brief="armEthernetTimerLowSpeed()">FSP::EthernetCommandInterface_armEthernetTimerLowSpeed(this, e);</entry>
     <exit brief="disarmEthernetTimer()">FSP::EthernetCommandInterface_disarmEthernetTimer(this, e);</exit>
     <initial target="../3">
      <initial_glyph conn="18,43,5,3,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="DEACTIVATE_ETHERNET_COMMAND_INTERFACE" target="../../1">
      <tran_glyph conn="15,41,3,3,-2,-22,42">
       <action box="-1,-24,39,2"/>
      </tran_glyph>
     </tran>
     <tran trig="ETHERNET_TIMEOUT">
      <action brief="pollEthernet()">FSP::EthernetCommandInterface_pollEthernet(this, e);</action>
      <tran_glyph conn="15,37,3,-1,31">
       <action box="0,-2,34,3"/>
      </tran_glyph>
     </tran>
     <state name="Unintitalized">
      <tran trig="ETHERNET_INITIALIZED" target="../../5">
       <tran_glyph conn="49,43,1,3,23">
        <action box="2,-3,19,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_TIMEOUT">
       <action brief="initializeEthernet()">FSP::EthernetCommandInterface_initializeEthernet(this, e);</action>
       <tran_glyph conn="21,46,3,-1,18">
        <action box="0,-2,18,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="21,39,28,10"/>
     </state>
     <state name="WaitingForNewCommand">
      <tran trig="SERIAL_COMMAND_AVAILABLE" target="../../6">
       <tran_glyph conn="73,73,1,3,27">
        <action box="2,-2,32,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_COMMAND_AVAILABLE" target="../../8">
       <action brief="analyzeCommand()">FSP::EthernetCommandInterface_analyzeCommand(this, e);</action>
       <tran_glyph conn="24,79,2,0,21">
        <action box="1,16,29,5"/>
       </tran_glyph>
      </tran>
      <state name="PlayingPattern">
       <tran trig="COMMAND_PROCESSED">
        <action brief="writeBinaryResponse()">FSP::EthernetCommandInterface_writeBinaryResponse(this, e);</action>
        <tran_glyph conn="27,68,3,-1,21">
         <action box="0,-2,22,4"/>
        </tran_glyph>
       </tran>
       <tran trig="PATTERN_FINISHED_PLAYING">
        <action brief="writePatternFinishedResponse()">FSP::EthernetCommandInterface_writePatternFinishedResponse(this, e);</action>
        <tran_glyph conn="27,73,3,-1,28">
         <action box="0,-2,29,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="27,63,44,14"/>
      </state>
      <state_glyph node="21,55,52,24"/>
     </state>
     <state name="CreatingServerConnection">
      <tran trig="ETHERNET_SERVER_CONNECTED" target="../../4">
       <tran_glyph conn="83,49,2,0,2,-49,4">
        <action box="-44,3,28,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_TIMEOUT">
       <action brief="createServerConnection()">FSP::EthernetCommandInterface_createServerConnection(this, e);</action>
       <tran_glyph conn="72,45,3,-1,19">
        <action box="0,-2,19,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="72,39,25,10"/>
     </state>
     <state name="Waiting">
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <tran_glyph conn="100,68,3,1,-27">
        <action box="-23,-2,21,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="100,64,18,12"/>
     </state>
     <state name="ProcessingBinaryCommand">
      <entry brief="processBinaryCommand()">FSP::EthernetCommandInterface_processBinaryCommand(this, e);</entry>
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <action brief="writeBinaryResponse()">FSP::EthernetCommandInterface_writeBinaryResponse(this, e);</action>
       <tran_glyph conn="53,89,3,2,-27,-10">
        <action box="-26,-2,21,4"/>
       </tran_glyph>
      </tran>
      <tran trig="PLAY_PATTERN" target="../../4/2">
       <action brief="storeRuntimeDuration()">FSP::EthernetCommandInterface_storeRuntimeDuration(this, e);</action>
       <tran_glyph conn="54,87,0,2,-4,-20,-6">
        <action box="-18,-6,17,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="53,87,23,11">
       <entry box="1,2,21,3"/>
      </state_glyph>
     </state>
     <state name="ChoosingCommandProcessor">
      <tran trig="PROCESS_BINARY_COMMAND" target="../../7">
       <tran_glyph conn="44,105,1,2,14,-7">
        <action box="0,0,25,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PROCESS_STREAM_COMMAND" target="../../9">
       <tran_glyph conn="44,110,1,3,36">
        <action box="0,-2,25,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="20,100,24,14"/>
     </state>
     <state name="ProcessingStreamCommand">
      <entry brief="armEthernetTimerHighSpeed()">FSP::EthernetCommandInterface_armEthernetTimerHighSpeed(this, e);</entry>
      <exit brief="armEthernetTimerLowSpeed()">FSP::EthernetCommandInterface_armEthernetTimerLowSpeed(this, e);</exit>
      <tran trig="COMMAND_PROCESSED" target="../../4">
       <action brief="writeBinaryResponse()">FSP::EthernetCommandInterface_writeBinaryResponse(this, e);</action>
       <tran_glyph conn="82,85,0,2,-1,-26,-5">
        <action box="-25,-3,23,5"/>
       </tran_glyph>
      </tran>
      <tran trig="ETHERNET_COMMAND_AVAILABLE">
       <action brief="updateStreamCommand()">FSP::EthernetCommandInterface_updateStreamCommand(this, e);</action>
       <choice>
        <guard brief="ifStreamCommandComplete()">FSP::EthernetCommandInterface_ifStreamCommandComplete(this, e)</guard>
        <action brief="processStreamCommand()">FSP::EthernetCommandInterface_processStreamCommand(this, e);</action>
        <choice_glyph conn="100,100,5,-1,24">
         <action box="2,-2,24,5"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard brief="else"/>
        <choice_glyph conn="100,100,4,-1,8">
         <action box="1,5,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="80,95,3,-1,20,5">
        <action box="0,-2,28,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="80,85,48,29">
       <entry box="1,2,27,2"/>
       <exit box="1,4,27,5"/>
      </state_glyph>
     </state>
     <state_glyph node="15,28,116,94">
      <entry box="1,2,24,2"/>
      <exit box="1,4,24,2"/>
     </state_glyph>
    </state>
    <state_diagram size="154,127"/>
   </statechart>
  </class>
  <class name="Frame" superclass="qpcpp::QActive">
   <attribute name="instance" type="Frame" visibility="0x00" properties="0x01">
    <documentation>static class instance (Singleton)</documentation>
   </attribute>
   <attribute name="panel_set_row_index_" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="panel_set_col_index_" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="panel_byte_count_" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="buffer_position_" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="grayscale_" type="bool" visibility="0x00" properties="0x00"/>
   <attribute name="event_queue_" type="QP::QEQueue" visibility="0x00" properties="0x00"/>
   <attribute name="frame_" type="FrameEvt const *" visibility="0x00" properties="0x00"/>
   <operation name="Frame" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Frame::initial))</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="initializeAndSubscribe()">FSP::Frame_initializeAndSubscribe(this, e);</action>
     <initial_glyph conn="37,1,4,0,4">
      <action box="1,1,20,3"/>
     </initial_glyph>
    </initial>
    <state name="Initialized">
     <initial target="../7">
      <initial_glyph conn="38,8,4,0,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="FILL_FRAME_BUFFER_WITH_ALL_ON">
      <action brief="defer()">FSP::Frame_defer(this, e);</action>
      <tran_glyph conn="6,42,3,-1,29">
       <action box="0,-2,30,4"/>
      </tran_glyph>
     </tran>
     <tran trig="FILL_FRAME_BUFFER_WITH_DECODED_FRAME">
      <action brief="defer()">FSP::Frame_defer(this, e);</action>
      <tran_glyph conn="6,47,3,-1,37">
       <action box="0,-2,38,4"/>
      </tran_glyph>
     </tran>
     <tran trig="SWITCH_GRAYSCALE">
      <action brief="defer()">FSP::Frame_defer(this, e);</action>
      <tran_glyph conn="6,52,3,-1,20">
       <action box="0,-2,19,4"/>
      </tran_glyph>
     </tran>
     <tran trig="DEACTIVATE_DISPLAY">
      <action brief="deleteFrameReference()">FSP::Frame_deleteFrameReference(this, e);</action>
      <tran_glyph conn="6,57,3,-1,23">
       <action box="0,-2,19,5"/>
      </tran_glyph>
     </tran>
     <tran trig="SET_GRAYSCALE">
      <action brief="setGrayscale()">FSP::Frame_setGrayscale(this, e);</action>
      <tran_glyph conn="6,62,3,-1,23">
       <action box="0,-2,20,4"/>
      </tran_glyph>
     </tran>
     <state name="TransferringFrame">
      <entry brief="reset();">FSP::Frame_reset(this, e);</entry>
      <initial target="../3">
       <initial_glyph conn="40,80,4,0,3">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <tran trig="FRAME_TRANSFERRED" target="../../7">
       <tran_glyph conn="81,83,1,1,5,-68,-31">
        <action box="-20,-71,20,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DEACTIVATE_DISPLAY" target="../../7">
       <action brief="deleteFrameReference()">FSP::Frame_deleteFrameReference(this, e);</action>
       <tran_glyph conn="64,76,0,1,-52,-9">
        <action box="1,-21,18,5"/>
       </tran_glyph>
      </tran>
      <state name="TransferringPanelSet">
       <entry brief="beginTransferPanelSet()">FSP::Frame_beginTransferPanelSet(this, e);</entry>
       <exit brief="endTransferPanelSet()">FSP::Frame_endTransferPanelSet(this, e);</exit>
       <tran trig="PANEL_SET_TRANSFERRED">
        <choice target="../..">
         <guard brief="ifFrameNotTransferred()">FSP::Frame_ifFrameNotTransferred(this, e)</guard>
         <choice_glyph conn="43,104,5,2,6,-5">
          <action box="1,0,26,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard brief="else"/>
         <action brief="publishFrameTransferred()">FSP::Frame_publishFrameTransferred(this, e);</action>
         <choice_glyph conn="43,104,4,-1,4,5">
          <action box="6,3,18,6"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="38,99,2,-1,5,5">
         <action box="-23,2,22,5"/>
        </tran_glyph>
       </tran>
       <state_glyph node="22,83,50,16">
        <entry box="1,2,49,2"/>
        <exit box="1,4,48,2"/>
       </state_glyph>
      </state>
      <state_glyph node="10,76,71,38">
       <entry box="1,2,10,2"/>
      </state_glyph>
     </state>
     <state name="Inactive">
      <entry brief="recall()">FSP::Frame_recall(this, e);</entry>
      <tran trig="TRANSFER_FRAME" target="../../6">
       <tran_glyph conn="46,39,2,0,37">
        <action box="1,4,32,2"/>
       </tran_glyph>
      </tran>
      <tran trig="FILL_FRAME_BUFFER_WITH_ALL_ON">
       <action brief="fillFrameBufferWithAllOn()">FSP::Frame_fillFrameBufferWithAllOn(this, e);</action>
       <tran_glyph conn="11,18,3,-1,29">
        <action box="0,-2,30,4"/>
       </tran_glyph>
      </tran>
      <tran trig="FILL_FRAME_BUFFER_WITH_DECODED_FRAME">
       <action brief="fillFrameBufferWithDecodedFrame()">FSP::Frame_fillFrameBufferWithDecodedFrame(this, e);</action>
       <tran_glyph conn="11,24,3,-1,37">
        <action box="0,-2,38,4"/>
       </tran_glyph>
      </tran>
      <tran trig="SWITCH_GRAYSCALE">
       <action brief="switchGrayscale()">FSP::Frame_switchGrayscale(this, e);</action>
       <tran_glyph conn="11,30,3,-1,18">
        <action box="0,-2,19,4"/>
       </tran_glyph>
      </tran>
      <tran trig="FRAME_FILLED">
       <action brief="saveFrameReference()">FSP::Frame_saveFrameReference(this, e);</action>
       <tran_glyph conn="11,35,3,-1,23">
        <action box="0,-2,21,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="11,10,44,29">
       <entry box="1,2,9,2"/>
      </state_glyph>
     </state>
     <state_glyph node="6,5,85,115"/>
    </state>
    <state_diagram size="97,129"/>
   </statechart>
  </class>
  <class name="Watchdog" superclass="qpcpp::QActive">
   <attribute name="instance" type="Watchdog" visibility="0x00" properties="0x01"/>
   <attribute name="watchdog_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <operation name="Watchdog" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Watchdog::initial)),
    watchdog_time_evt_(this, WATCHDOG_TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="initializeAndSubscribe()">FSP::Watchdog_initializeAndSubscribe(this, e);</action>
     <initial_glyph conn="23,4,4,0,4">
      <action box="1,0,21,3"/>
     </initial_glyph>
    </initial>
    <state name="Feeding">
     <entry brief="armWatchdogTimer()">FSP::Watchdog_armWatchdogTimer(this, e);</entry>
     <exit brief="disarmWatchdogTimer()">FSP::Watchdog_disarmWatchdogTimer(this, e);</exit>
     <initial target="../2">
      <initial_glyph conn="49,22,5,1,-4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="RESET" target="../../2">
      <tran_glyph conn="24,30,2,0,7">
       <action box="1,2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Initialized">
      <tran trig="WATCHDOG_TIMEOUT">
       <action brief="feedWatchdog()">FSP::Watchdog_feedWatchdog(this, e);</action>
       <tran_glyph conn="17,22,3,-1,22">
        <action box="0,-2,23,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="17,18,28,7"/>
     </state>
     <state_glyph node="14,8,45,22">
      <entry box="1,2,23,2"/>
      <exit box="1,4,23,2"/>
     </state_glyph>
    </state>
    <state name="Resetting">
     <state_glyph node="14,37,28,13"/>
    </state>
    <state_diagram size="80,70"/>
   </statechart>
  </class>
  <class name="Pattern" superclass="qpcpp::QActive">
   <attribute name="instance" type="Pattern" visibility="0x00" properties="0x01"/>
   <attribute name="frame_rate_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="frame_rate_hz_" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="runtime_duration_ms_" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="runtime_duration_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="byte_count_per_frame_" type="std::uint64_t" visibility="0x00" properties="0x00"/>
   <attribute name="frame_rate_queue_" type="QP::QEQueue" visibility="0x00" properties="0x00"/>
   <attribute name="positive_direction_" type="bool" visibility="0x00" properties="0x00"/>
   <attribute name="find_card_time_evt_" type="QP::QTimeEvt" visibility="0x00" properties="0x00"/>
   <attribute name="frame_" type="FrameEvt const *" visibility="0x00" properties="0x00"/>
   <attribute name="frame_count_per_pattern_" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="frame_index_" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="card_" type="QP::QHsm *" visibility="0x00" properties="0x00"/>
   <operation name="Pattern" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Pattern::initial)),
    frame_rate_time_evt_(this, FRAME_RATE_TIMEOUT_SIG, 0U),
    runtime_duration_time_evt_(this, RUNTIME_DURATION_TIMEOUT_SIG, 0U),
    find_card_time_evt_(this, FIND_CARD_TIMEOUT_SIG, 0U)

card_ = Card_getInstance();</code>
   </operation>
   <operation name="dispatchToCard" type="void" visibility="0x02" properties="0x00">
    <parameter name="e" type="QP::QEvt const *"/>
    <code>card_-&gt;dispatch(e, m_prio);</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="initializeAndSubscribe()">FSP::Pattern_initializeAndSubscribe(this, e);</action>
     <initial_glyph conn="28,2,4,0,7">
      <action box="1,1,23,2"/>
     </initial_glyph>
    </initial>
    <state name="Initialized">
     <initial target="../10">
      <initial_glyph conn="49,13,4,0,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="PLAY_PATTERN">
      <action brief="checkAndStoreParameters()">FSP::Pattern_checkAndStoreParameters(this, e);</action>
      <tran_glyph conn="1,13,3,-1,33">
       <action box="0,-2,20,5"/>
      </tran_glyph>
     </tran>
     <tran trig="FIND_CARD_TIMEOUT">
      <action brief="dispatchToCard()">dispatchToCard(e);</action>
      <tran_glyph conn="1,17,3,-1,33">
       <action box="0,-2,23,5"/>
      </tran_glyph>
     </tran>
     <tran trig="CARD_FOUND">
      <action brief="dispatchToCard()">dispatchToCard(e);</action>
      <tran_glyph conn="1,21,3,-1,33">
       <action box="0,-2,23,5"/>
      </tran_glyph>
     </tran>
     <tran trig="CARD_NOT_FOUND">
      <action brief="dispatchToCard()">dispatchToCard(e);</action>
      <tran_glyph conn="1,25,3,-1,33">
       <action box="0,-2,23,5"/>
      </tran_glyph>
     </tran>
     <tran trig="FILE_VALID">
      <action brief="dispatchToCard()">dispatchToCard(e);</action>
      <tran_glyph conn="1,29,3,-1,33">
       <action box="0,-2,15,4"/>
      </tran_glyph>
     </tran>
     <tran trig="FILE_NOT_VALID">
      <action brief="dispatchToCard()">dispatchToCard(e);</action>
      <tran_glyph conn="1,33,3,-1,33">
       <action box="0,-2,19,4"/>
      </tran_glyph>
     </tran>
     <tran trig="PATTERN_NOT_VALID">
      <action brief="dispatchToCard()">dispatchToCard(e);</action>
      <tran_glyph conn="1,37,3,-1,33">
       <action box="0,-2,19,4"/>
      </tran_glyph>
     </tran>
     <tran trig="SET_FRAME_COUNT_PER_PATTERN">
      <action brief="setFrameCountPerPattern()">FSP::Pattern_setFrameCountPerPattern(this, e);</action>
      <tran_glyph conn="1,41,3,-1,33">
       <action box="0,-2,28,4"/>
      </tran_glyph>
     </tran>
     <tran trig="SET_BYTE_COUNT_PER_FRAME">
      <action brief="setByteCountPerFrame()">FSP::Pattern_setByteCountPerFrame(this, e);</action>
      <tran_glyph conn="1,45,3,-1,33">
       <action box="0,-2,28,4"/>
      </tran_glyph>
     </tran>
     <state name="Inactive">
      <tran trig="BEGIN_PLAYING_PATTERN" target="../../11/2">
       <action brief="armFindCardTimer()">FSP::Pattern_armFindCardTimer(this, e);</action>
       <tran_glyph conn="58,23,2,0,37">
        <action box="1,1,27,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="41,15,62,8"/>
     </state>
     <state name="DisplayingPattern">
      <tran trig="END_PLAYING_PATTERN" target="../../10">
       <action brief="dispatchToCard()">dispatchToCard(e);</action>
       <tran_glyph conn="43,56,0,2,-33">
        <action box="-20,-5,24,4"/>
       </tran_glyph>
      </tran>
      <state name="PlayingPattern">
       <entry brief="armTimers()">FSP::Pattern_armTimers(this, e);</entry>
       <exit brief="disarmTimersAndCleanup()">FSP::Pattern_disarmTimersAndCleanup(this, e);</exit>
       <initial target="../5">
        <action brief="initializeFrameIndex()">FSP::Pattern_initializeFrameIndex(this, e);</action>
        <initial_glyph conn="46,79,4,0,4">
         <action box="0,1,19,2"/>
        </initial_glyph>
       </initial>
       <tran trig="FRAME_RATE_TIMEOUT">
        <action brief="defer()">FSP::Pattern_defer(this, e);</action>
        <tran_glyph conn="3,87,3,-1,27">
         <action box="0,-2,19,4"/>
        </tran_glyph>
       </tran>
       <tran trig="RUNTIME_DURATION_TIMEOUT">
        <action brief="endRuntimeDuration()">FSP::Pattern_endRuntimeDuration(this, e);</action>
        <tran_glyph conn="3,92,3,-1,27">
         <action box="0,-2,25,6"/>
        </tran_glyph>
       </tran>
       <state name="WaitingToDisplayFrame">
        <entry brief="recall()">FSP::Display_recall(this, e);</entry>
        <tran trig="FRAME_RATE_TIMEOUT" target="../../7">
         <action brief="deactivateDisplay()">FSP::Pattern_deactivateDisplay(this, e);</action>
         <tran_glyph conn="46,104,2,0,6">
          <action box="1,1,20,4"/>
         </tran_glyph>
        </tran>
        <state_glyph node="42,98,37,6">
         <entry box="1,2,10,2"/>
        </state_glyph>
       </state>
       <state name="DisplayingFrame">
        <entry brief="displayFrame()">FSP::Pattern_displayFrame(this, e);</entry>
        <tran trig="FRAME_TRANSFERRED" target="../../5">
         <action brief="deleteFrameReference()">FSP::Pattern_deleteFrameReference(this, e);</action>
         <tran_glyph conn="42,137,3,3,-3,-49,3">
          <action box="-22,-28,20,5"/>
         </tran_glyph>
        </tran>
        <state_glyph node="42,132,36,10">
         <entry box="1,2,16,2"/>
        </state_glyph>
       </state>
       <state name="ReadingFrameFromFile">
        <entry brief="readFrameFromFile()">FSP::Pattern_readFrameFromFile(this, e);</entry>
        <tran trig="FRAME_READ_FROM_FILE" target="../../3">
         <action brief="saveFrameReference()">FSP::Pattern_saveFrameReference(this, e);</action>
         <tran_glyph conn="46,92,2,0,6">
          <action box="1,1,21,4"/>
         </tran_glyph>
        </tran>
        <state_glyph node="42,83,37,9">
         <entry box="1,2,31,2"/>
        </state_glyph>
       </state>
       <state name="FillingFrameBufferWithDecodedFrame">
        <entry brief="fillFrameBufferWithDecodedFrame()">FSP::Pattern_fillFrameBufferWithDecodedFrame(this, e);</entry>
        <tran trig="FRAME_FILLED" target="../../4">
         <tran_glyph conn="46,128,2,0,4">
          <action box="1,1,14,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="41,122,37,6">
         <entry box="1,2,31,2"/>
        </state_glyph>
       </state>
       <state name="DecodingFrame">
        <entry brief="decodeFrame()">FSP::Pattern_decodeFrame(this, e);</entry>
        <tran trig="FRAME_DECODED" target="../../6">
         <tran_glyph conn="46,116,2,0,6">
          <action box="1,1,16,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="42,110,37,6">
         <entry box="1,2,15,2"/>
        </state_glyph>
       </state>
       <state_glyph node="3,75,77,68">
        <entry box="1,2,23,2"/>
        <exit box="1,4,23,2"/>
       </state_glyph>
      </state>
      <state name="WaitingToPlayPattern">
       <tran trig="PATTERN_VALID" target="../../1">
        <action brief="dispatchToCard()">dispatchToCard(e);</action>
        <tran_glyph conn="59,66,2,0,9">
         <action box="-14,2,16,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="56,60,17,6"/>
      </state>
      <state name="ShowingPatternFrame">
       <state_glyph node="82,75,50,69"/>
      </state>
      <state name="WaitingToShowPatternFrame">
       <tran trig="PATTERN_VALID" target="../../3">
        <action brief="dispatchToCard()">dispatchToCard(e);</action>
        <tran_glyph conn="90,66,2,0,9">
         <action box="-14,2,16,4"/>
        </tran_glyph>
       </tran>
       <state_glyph node="83,60,24,6"/>
      </state>
      <state_glyph node="2,56,131,89"/>
     </state>
     <state_glyph node="1,9,134,137"/>
    </state>
    <state_diagram size="136,146"/>
   </statechart>
  </class>
  <class name="Analog" superclass="qpcpp::QHsm">
   <attribute name="instance" type="Analog" visibility="0x00" properties="0x01"/>
   <operation name="Analog" type="" visibility="0x00" properties="0x00">
    <code>  : QHsm(&amp;initial)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="initialize()">FSP::Analog_initialize(this, e);</action>
     <initial_glyph conn="37,11,4,0,5">
      <action box="1,1,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Uninitialized">
     <tran trig="ANALOG_INITIALIZED" target="../../2">
      <tran_glyph conn="37,32,2,0,9">
       <action box="1,3,17,2"/>
      </tran_glyph>
     </tran>
     <tran trig="INITIALIZE_ANALOG">
      <action brief="initializeOutput()">FSP::Analog_initializeOutput(this, e);</action>
      <tran_glyph conn="28,25,3,-1,19">
       <action box="0,-2,17,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="28,16,22,16"/>
    </state>
    <state name="Initialized">
     <entry brief="enterInitialized()">FSP::Analog_enterInitialized(this, e);</entry>
     <tran trig="SET_ANALOG_OUTPUT">
      <action brief="setOutput()">FSP::Analog_setOutput(this, e);</action>
      <tran_glyph conn="28,49,3,-1,19">
       <action box="0,-2,18,5"/>
      </tran_glyph>
     </tran>
     <state_glyph node="28,41,22,14">
      <entry box="1,2,17,2"/>
     </state_glyph>
    </state>
    <state_diagram size="93,85"/>
   </statechart>
  </class>
  <class name="Card" superclass="qpcpp::QHsm">
   <attribute name="instance" type="Card" visibility="0x00" properties="0x01"/>
   <attribute name="pattern_id_" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="file_size_" type="std::uint64_t" visibility="0x00" properties="0x00"/>
   <operation name="Card" type="" visibility="0x00" properties="0x00">
    <code>  : QHsm(&amp;initial)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="initialize()">FSP::Card_initialize(this, e);</action>
     <initial_glyph conn="10,2,4,0,5">
      <action box="1,1,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Initialized">
     <initial target="../2">
      <initial_glyph conn="34,15,4,0,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="PLAY_PATTERN">
      <action brief="storeParameters()">FSP::Card_storeParameters(this, e);</action>
      <tran_glyph conn="1,12,3,-1,24">
       <action box="0,-2,18,4"/>
      </tran_glyph>
     </tran>
     <state name="WaitingToFindCard">
      <tran trig="FIND_CARD_TIMEOUT" target="../../3">
       <tran_glyph conn="34,24,2,0,6">
        <action box="1,2,25,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="30,18,48,6"/>
     </state>
     <state name="FindingCard">
      <entry brief="findCard()">FSP::Card_findCard(this, e);</entry>
      <tran trig="CARD_NOT_FOUND" target="../../2">
       <action brief="postAllOff()">FSP::Card_postAllOff(this, e);</action>
       <tran_glyph conn="79,37,1,1,18,-16,-19">
        <action box="0,-2,20,4"/>
       </tran_glyph>
      </tran>
      <tran trig="CARD_FOUND" target="../../4">
       <tran_glyph conn="34,41,2,0,9">
        <action box="1,3,13,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="30,30,49,11">
       <entry box="1,2,18,2"/>
      </state_glyph>
     </state>
     <state name="FileOpened">
      <entry brief="openFile()">FSP::Card_openFile(this, e);</entry>
      <exit brief="closeFile()">FSP::Card_closeFile(this, e);</exit>
      <initial target="../2">
       <initial_glyph conn="44,61,4,0,2">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <tran trig="END_PLAYING_PATTERN" target="../../2">
       <tran_glyph conn="30,59,3,3,-8,-38,8">
        <action box="-23,1,22,3"/>
       </tran_glyph>
      </tran>
      <state name="CheckingFile">
       <entry brief="checkFile()">FSP::Card_checkFile(this, e);</entry>
       <tran trig="FILE_NOT_VALID">
        <action brief="postAllOff()">FSP::Card_postAllOff(this, e);</action>
        <tran_glyph conn="54,68,1,-1,18">
         <action box="0,-2,16,4"/>
        </tran_glyph>
       </tran>
       <tran trig="FILE_VALID" target="../../3">
        <tran_glyph conn="36,72,2,0,5">
         <action box="1,1,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="33,63,21,9">
        <entry box="1,2,14,2"/>
       </state_glyph>
      </state>
      <state name="CheckingPattern">
       <entry brief="checkPattern()">FSP::Card_checkPattern(this, e);</entry>
       <tran trig="PATTERN_NOT_VALID">
        <action brief="postAllOff()">FSP::Card_postAllOff(this, e);</action>
        <tran_glyph conn="54,82,1,-1,18">
         <action box="0,-2,19,5"/>
        </tran_glyph>
       </tran>
       <tran trig="PATTERN_VALID" target="../../4">
        <tran_glyph conn="36,87,2,0,5">
         <action box="1,1,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="34,77,20,10">
        <entry box="1,2,15,2"/>
       </state_glyph>
      </state>
      <state name="DisplayingPattern">
       <state_glyph node="34,92,19,7"/>
      </state>
      <state_glyph node="30,50,66,54">
       <entry box="1,2,21,2"/>
       <exit box="1,4,23,2"/>
      </state_glyph>
     </state>
     <state_glyph node="1,7,102,101"/>
    </state>
    <state_diagram size="111,110"/>
   </statechart>
  </class>
 </package>
 <package name="Shared" stereotype="0x00" namespace="AC::">
  <attribute name="AO_Arena" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Arena::instance;</code>
  </attribute>
  <attribute name="AO_Display" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Display::instance;</code>
  </attribute>
  <attribute name="AO_SerialCommandInterface" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;SerialCommandInterface::instance;</code>
  </attribute>
  <attribute name="AO_EthernetCommandInterface" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;EthernetCommandInterface::instance;</code>
  </attribute>
  <attribute name="AO_Frame" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Frame::instance;</code>
  </attribute>
  <attribute name="AO_Watchdog" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Watchdog::instance;</code>
  </attribute>
  <attribute name="AO_Pattern" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Pattern::instance;</code>
  </attribute>
  <operation name="Analog_getInstance" type="QP::QHsm *" visibility="0x00" properties="0x00">
   <code>return &amp;Analog::instance;</code>
  </operation>
  <operation name="Card_getInstance" type="QP::QHsm *" visibility="0x00" properties="0x00">
   <code>return &amp;Card::instance;</code>
  </operation>
 </package>
 <package name="Events" stereotype="0x01">
  <class name="SetParameterEvt" superclass="qpcpp::QEvt">
   <attribute name="value" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="CommandEvt" superclass="qpcpp::QEvt">
   <attribute name="connection" type="void *" visibility="0x00" properties="0x00"/>
   <attribute name="binary_command" type="std::uint8_t const *" visibility="0x00" properties="0x00"/>
   <attribute name="binary_command_byte_count" type="std::uint32_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="PlayPatternEvt" superclass="qpcpp::QEvt">
   <attribute name="pattern_id" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="frame_rate" type="std::int16_t" visibility="0x00" properties="0x00"/>
   <attribute name="runtime_duration" type="std::uint16_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="FrameEvt" superclass="qpcpp::QEvt">
   <attribute name="buffer[AC::constants::byte_count_per_pattern_frame_max]" type="std::uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="ShowPatternFrameEvt" superclass="qpcpp::QEvt">
   <attribute name="pattern_id" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="frame_index" type="std::uint16_t" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <directory name=".">
  <file name="ArenaController.hpp">
   <text>#ifndef ARENA_CONTROLLER_HPP
#define ARENA_CONTROLLER_HPP

#include &quot;qpcpp.hpp&quot;
#include &quot;fsp.hpp&quot;


namespace ArduinoInterface
{
void setup();
void loop();
}

#endif</text>
  </file>
  <file name="SerialCommandInterface.hpp">
   <text>#ifndef SERIAL_COMMAND_INTERFACE_HPP
#define SERIAL_COMMAND_INTERFACE_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the active object
$declare${AOs::SerialCommandInterface}

#endif</text>
  </file>
  <file name="Arena.hpp">
   <text>#ifndef ARENA_HPP
#define ARENA_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the active object
$declare${AOs::Arena}

#endif</text>
  </file>
  <file name="Display.hpp">
   <text>#ifndef DISPLAY_HPP
#define DISPLAY_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the active object
$declare${AOs::Display}

#endif</text>
  </file>
  <file name="EthernetCommandInterface.hpp">
   <text>#ifndef ETHERNET_COMMAND_INTERFACE_HPP
#define ETHERNET_COMMAND_INTERFACE_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the active object
$declare${AOs::EthernetCommandInterface}

#endif</text>
  </file>
  <file name="Frame.hpp">
   <text>#ifndef FRAME_HPP
#define FRAME_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the active object
$declare${AOs::Frame}

#endif</text>
  </file>
  <file name="Watchdog.hpp">
   <text>#ifndef WATCHDOG_HPP
#define WATCHDOG_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the active object
$declare${AOs::Watchdog}

#endif</text>
  </file>
  <file name="Pattern.hpp">
   <text>#ifndef PATTERN_HPP
#define PATTERN_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the active object
$declare${AOs::Pattern}

#endif</text>
  </file>
  <file name="Shared.hpp">
   <text>#ifndef SHARED_HPP
#define SHARED_HPP

#include &quot;qpcpp.hpp&quot;


$declare${Shared}

#endif</text>
  </file>
  <file name="Events.hpp">
   <text>#ifndef EVENTS_HPP
#define EVENTS_HPP

#include &quot;qpcpp.hpp&quot;
#include &quot;constants.hpp&quot;


$declare${Events}

#endif</text>
  </file>
  <file name="Analog.hpp">
   <text>#ifndef ANALOG_HPP
#define ANALOG_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the hsm
$declare${AOs::Analog}

#endif</text>
  </file>
  <file name="Card.hpp">
   <text>#ifndef CARD_HPP
#define CARD_HPP

#include &quot;Shared.hpp&quot;
#include &quot;Events.hpp&quot;
#include &quot;fsp.hpp&quot;


//============================================================================
// generate declaration of the hsm
$declare${AOs::Card}

#endif</text>
  </file>
 </directory>
 <directory name="./ArenaController">
  <file name="Arena.cpp">
   <text>#include &quot;Arena.hpp&quot;


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Arena}

//============================================================================
// generate definition of the AO
$define${AOs::Arena}</text>
  </file>
  <file name="ArenaController.cpp">
   <text>#include &quot;ArenaController.hpp&quot;

using namespace QP;

namespace ArduinoInterface
{
void setup()
{
  FSP::ArenaController_setup();
}

void loop()
{
  QF::run();
}
}</text>
  </file>
  <file name="SerialCommandInterface.cpp">
   <text>#include &quot;SerialCommandInterface.hpp&quot;


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_SerialCommandInterface}

//============================================================================
// generate definition of the AO
$define${AOs::SerialCommandInterface}</text>
  </file>
  <file name="Display.cpp">
   <text>#include &quot;Display.hpp&quot;


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Display}

//============================================================================
// generate definition of the AO
$define${AOs::Display}</text>
  </file>
  <file name="EthernetCommandInterface.cpp">
   <text>#include &quot;EthernetCommandInterface.hpp&quot;


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_EthernetCommandInterface}

//============================================================================
// generate definition of the AO
$define${AOs::EthernetCommandInterface}</text>
  </file>
  <file name="Frame.cpp">
   <text>#include &quot;Frame.hpp&quot;


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Frame}

//============================================================================
// generate definition of the AO
$define${AOs::Frame}</text>
  </file>
  <file name="Watchdog.cpp">
   <text>#include &quot;Watchdog.hpp&quot;


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Watchdog}

//============================================================================
// generate definition of the AO
$define${AOs::Watchdog}</text>
  </file>
  <file name="Pattern.cpp">
   <text>#include &quot;Pattern.hpp&quot;


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
$define${Shared::AO_Pattern}

//============================================================================
// generate definition of the AO
$define${AOs::Pattern}</text>
  </file>
  <file name="Analog.cpp">
   <text>#include &quot;Analog.hpp&quot;


using namespace QP;

//============================================================================
$define${Shared::Analog_getInstance}

//============================================================================
// generate definition of the HSM
$define${AOs::Analog}</text>
  </file>
  <file name="Card.cpp">
   <text>#include &quot;Card.hpp&quot;


using namespace QP;

//============================================================================
$define${Shared::Card_getInstance}

//============================================================================
// generate definition of the HSM
$define${AOs::Card}</text>
  </file>
 </directory>
</model>

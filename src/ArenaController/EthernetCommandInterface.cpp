//$file${./ArenaControlle~::EthernetCommandInterface.cpp} vvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::EthernetCommandInterface.cpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${./ArenaControlle~::EthernetCommandInterface.cpp} ^^^^^^^^^^^^^^^^^
#include "EthernetCommandInterface.hpp"


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${Shared::AO_EthernetCommandInterface} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${Shared::AO_EthernetCommandInterface} .....................................
QP::QActive * const AO_EthernetCommandInterface = &EthernetCommandInterface::instance;

} // namespace AC
//$enddef${Shared::AO_EthernetCommandInterface} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//$define${AOs::EthernetCommandInterface} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${AOs::EthernetCommandInterface} ...........................................
EthernetCommandInterface EthernetCommandInterface::instance;

//${AOs::EthernetCommandI~::EthernetCommandInterface} ........................
EthernetCommandInterface::EthernetCommandInterface()
: QActive(Q_STATE_CAST(&EthernetCommandInterface::initial)),
    ethernet_time_evt_(this, ETHERNET_TIMEOUT_SIG, 0U)
{}

//${AOs::EthernetCommandI~::SM} ..............................................
Q_STATE_DEF(EthernetCommandInterface, initial) {
    //${AOs::EthernetCommandI~::SM::initial}
    FSP::EthernetCommandInterface_initializeAndSubscribe(this, e);

    QS_FUN_DICTIONARY(&EthernetCommandInterface::Inactive);
    QS_FUN_DICTIONARY(&EthernetCommandInterface::Active);
    QS_FUN_DICTIONARY(&EthernetCommandInterface::Unintitalized);
    QS_FUN_DICTIONARY(&EthernetCommandInterface::WaitingForNewCommand);
    QS_FUN_DICTIONARY(&EthernetCommandInterface::CreatingServerConnection);
    QS_FUN_DICTIONARY(&EthernetCommandInterface::Waiting);
    QS_FUN_DICTIONARY(&EthernetCommandInterface::ProcessingBinaryCommand);
    QS_FUN_DICTIONARY(&EthernetCommandInterface::ChoosingCommandProcessor);
    QS_FUN_DICTIONARY(&EthernetCommandInterface::ProcessingStreamCommand);

    return tran(&Inactive);
}

//${AOs::EthernetCommandI~::SM::Inactive} ....................................
Q_STATE_DEF(EthernetCommandInterface, Inactive) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Inactive::ACTIVATE_ETHERNET_COMMAND_INTERF~}
        case ACTIVATE_ETHERNET_COMMAND_INTERFACE_SIG: {
            status_ = tran(&Active);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::EthernetCommandI~::SM::Active} ......................................
Q_STATE_DEF(EthernetCommandInterface, Active) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Active}
        case Q_ENTRY_SIG: {
            FSP::EthernetCommandInterface_armEthernetTimerLowSpeed(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active}
        case Q_EXIT_SIG: {
            FSP::EthernetCommandInterface_disarmEthernetTimer(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::initial}
        case Q_INIT_SIG: {
            status_ = tran(&Unintitalized);
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::DEACTIVATE_ETHERNET_COMMAND_INTE~}
        case DEACTIVATE_ETHERNET_COMMAND_INTERFACE_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::ETHERNET_TIMEOUT}
        case ETHERNET_TIMEOUT_SIG: {
            FSP::EthernetCommandInterface_pollEthernet(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::EthernetCommandI~::SM::Active::Unintitalized} .......................
Q_STATE_DEF(EthernetCommandInterface, Unintitalized) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Active::Unintitalized::ETHERNET_INITIALIZED}
        case ETHERNET_INITIALIZED_SIG: {
            status_ = tran(&CreatingServerConnection);
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::Unintitalized::ETHERNET_TIMEOUT}
        case ETHERNET_TIMEOUT_SIG: {
            FSP::EthernetCommandInterface_initializeEthernet(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}

//${AOs::EthernetCommandI~::SM::Active::WaitingForNewCommand} ................
Q_STATE_DEF(EthernetCommandInterface, WaitingForNewCommand) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Active::WaitingForNewCom~::SERIAL_COMMAND_AVAILABLE}
        case SERIAL_COMMAND_AVAILABLE_SIG: {
            status_ = tran(&Waiting);
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::WaitingForNewCom~::ETHERNET_COMMAND_AVAILABLE}
        case ETHERNET_COMMAND_AVAILABLE_SIG: {
            FSP::EthernetCommandInterface_analyzeCommand(this, e);
            status_ = tran(&ChoosingCommandProcessor);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}

//${AOs::EthernetCommandI~::SM::Active::CreatingServerConnection} ............
Q_STATE_DEF(EthernetCommandInterface, CreatingServerConnection) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Active::CreatingServerCo~::ETHERNET_SERVER_CONNECTED}
        case ETHERNET_SERVER_CONNECTED_SIG: {
            status_ = tran(&WaitingForNewCommand);
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::CreatingServerCo~::ETHERNET_TIMEOUT}
        case ETHERNET_TIMEOUT_SIG: {
            FSP::EthernetCommandInterface_createServerConnection(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}

//${AOs::EthernetCommandI~::SM::Active::Waiting} .............................
Q_STATE_DEF(EthernetCommandInterface, Waiting) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Active::Waiting::COMMAND_PROCESSED}
        case COMMAND_PROCESSED_SIG: {
            status_ = tran(&WaitingForNewCommand);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}

//${AOs::EthernetCommandI~::SM::Active::ProcessingBinaryCommand} .............
Q_STATE_DEF(EthernetCommandInterface, ProcessingBinaryCommand) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Active::ProcessingBinaryCommand}
        case Q_ENTRY_SIG: {
            FSP::EthernetCommandInterface_processBinaryCommand(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::ProcessingBinary~::COMMAND_PROCESSED}
        case COMMAND_PROCESSED_SIG: {
            FSP::EthernetCommandInterface_writeBinaryResponse(this, e);
            status_ = tran(&WaitingForNewCommand);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}

//${AOs::EthernetCommandI~::SM::Active::ChoosingCommandProcessor} ............
Q_STATE_DEF(EthernetCommandInterface, ChoosingCommandProcessor) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Active::ChoosingCommandP~::PROCESS_BINARY_COMMAND}
        case PROCESS_BINARY_COMMAND_SIG: {
            status_ = tran(&ProcessingBinaryCommand);
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::ChoosingCommandP~::PROCESS_STREAM_COMMAND}
        case PROCESS_STREAM_COMMAND_SIG: {
            status_ = tran(&ProcessingStreamCommand);
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}

//${AOs::EthernetCommandI~::SM::Active::ProcessingStreamCommand} .............
Q_STATE_DEF(EthernetCommandInterface, ProcessingStreamCommand) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::EthernetCommandI~::SM::Active::ProcessingStreamCommand}
        case Q_ENTRY_SIG: {
            FSP::EthernetCommandInterface_armEthernetTimerHighSpeed(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::ProcessingStreamCommand}
        case Q_EXIT_SIG: {
            FSP::EthernetCommandInterface_armEthernetTimerLowSpeed(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::ProcessingStream~::COMMAND_PROCESSED}
        case COMMAND_PROCESSED_SIG: {
            FSP::EthernetCommandInterface_writeBinaryResponse(this, e);
            status_ = tran(&WaitingForNewCommand);
            break;
        }
        //${AOs::EthernetCommandI~::SM::Active::ProcessingStream~::ETHERNET_COMMAND_AVAILABLE}
        case ETHERNET_COMMAND_AVAILABLE_SIG: {
            FSP::EthernetCommandInterface_updateStreamCommand(this, e);
            //${AOs::EthernetCommandI~::SM::Active::ProcessingStream~::ETHERNET_COMMAND~::[ifStreamCommandComplete()]}
            if (FSP::EthernetCommandInterface_ifStreamCommandComplete(this, e)) {
                FSP::EthernetCommandInterface_processStreamCommand(this, e);
                status_ = Q_RET_HANDLED;
            }
            //${AOs::EthernetCommandI~::SM::Active::ProcessingStream~::ETHERNET_COMMAND~::[else]}
            else {
                status_ = Q_RET_HANDLED;
            }
            break;
        }
        default: {
            status_ = super(&Active);
            break;
        }
    }
    return status_;
}

} // namespace AC
//$enddef${AOs::EthernetCommandInterface} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

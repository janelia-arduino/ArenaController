//$file${./ArenaControlle~::Arena.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::Arena.cpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${./ArenaControlle~::Arena.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "Arena.hpp"


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${Shared::AO_Arena} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${Shared::AO_Arena} ........................................................
QP::QActive * const AO_Arena = &Arena::instance;

} // namespace AC
//$enddef${Shared::AO_Arena} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//$define${AOs::Arena} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${AOs::Arena} ..............................................................
Arena Arena::instance;

//${AOs::Arena::Arena} .......................................................
Arena::Arena()
: QActive(Q_STATE_CAST(&Arena::initial)),
    initialize_analog_time_evt_(this, INITIALIZE_ANALOG_TIMEOUT_SIG, 0U)
{
    analog_ = Analog_getInstance();
}

//${AOs::Arena::dispatchToAnalog} ............................................
void Arena::dispatchToAnalog(QP::QEvt const * e) {
    analog_->dispatch(e, m_prio);
}

//${AOs::Arena::SM} ..........................................................
Q_STATE_DEF(Arena, initial) {
    //${AOs::Arena::SM::initial}
    FSP::Arena_initializeAndSubscribe(this, e);

    QS_FUN_DICTIONARY(&Arena::ArenaOn);
    QS_FUN_DICTIONARY(&Arena::AllOn);
    QS_FUN_DICTIONARY(&Arena::AllOff);
    QS_FUN_DICTIONARY(&Arena::StreamingFrame);
    QS_FUN_DICTIONARY(&Arena::PlayingPattern);
    QS_FUN_DICTIONARY(&Arena::ShowingPatternFrame);

    return tran(&ArenaOn);
}

//${AOs::Arena::SM::ArenaOn} .................................................
Q_STATE_DEF(Arena, ArenaOn) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Arena::SM::ArenaOn}
        case Q_ENTRY_SIG: {
            FSP::Arena_activateCommandInterfaces(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Arena::SM::ArenaOn}
        case Q_EXIT_SIG: {
            FSP::Arena_deactivateCommandInterfaces(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Arena::SM::ArenaOn::initial}
        case Q_INIT_SIG: {
            status_ = tran(&AllOff);
            break;
        }
        //${AOs::Arena::SM::ArenaOn::ALL_OFF}
        case ALL_OFF_SIG: {
            FSP::Arena_allOffTransition(this, e);
            status_ = tran(&AllOff);
            break;
        }
        //${AOs::Arena::SM::ArenaOn::STREAM_FRAME}
        case STREAM_FRAME_SIG: {
            FSP::Arena_streamFrameTransition(this, e);
            status_ = tran(&StreamingFrame);
            break;
        }
        //${AOs::Arena::SM::ArenaOn::ALL_ON}
        case ALL_ON_SIG: {
            FSP::Arena_allOnTransition(this, e);
            status_ = tran(&AllOn);
            break;
        }
        //${AOs::Arena::SM::ArenaOn::PLAY_PATTERN}
        case PLAY_PATTERN_SIG: {
            FSP::Arena_playPatternTransition(this, e);
            status_ = tran(&PlayingPattern);
            break;
        }
        //${AOs::Arena::SM::ArenaOn::INITIALIZE_ANALOG_TIMEOUT}
        case INITIALIZE_ANALOG_TIMEOUT_SIG: {
            FSP::Arena_initializeAnalog(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Arena::SM::ArenaOn::ANALOG_INITIALIZED}
        case ANALOG_INITIALIZED_SIG: {
            dispatchToAnalog(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Arena::SM::ArenaOn::SET_ANALOG_OUTPUT}
        case SET_ANALOG_OUTPUT_SIG: {
            dispatchToAnalog(e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Arena::SM::ArenaOn::SHOW_PATTERN_FRAME}
        case SHOW_PATTERN_FRAME_SIG: {
            FSP::Arena_showPatternFrameTransition(this, e);
            status_ = tran(&ShowingPatternFrame);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::Arena::SM::ArenaOn::AllOn} ..........................................
Q_STATE_DEF(Arena, AllOn) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Arena::SM::ArenaOn::AllOn}
        case Q_ENTRY_SIG: {
            FSP::Arena_fillFrameBufferWithAllOn(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Arena::SM::ArenaOn::AllOn::FRAME_FILLED}
        case FRAME_FILLED_SIG: {
            FSP::Arena_displayFrame(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}

//${AOs::Arena::SM::ArenaOn::AllOff} .........................................
Q_STATE_DEF(Arena, AllOff) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Arena::SM::ArenaOn::AllOff}
        case Q_ENTRY_SIG: {
            FSP::Arena_deactivateDisplay(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}

//${AOs::Arena::SM::ArenaOn::StreamingFrame} .................................
Q_STATE_DEF(Arena, StreamingFrame) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Arena::SM::ArenaOn::StreamingFrame}
        case Q_ENTRY_SIG: {
            FSP::Arena_fillFrameBufferWithDecodedFrame(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Arena::SM::ArenaOn::StreamingFrame::FRAME_FILLED}
        case FRAME_FILLED_SIG: {
            FSP::Arena_displayFrame(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}

//${AOs::Arena::SM::ArenaOn::PlayingPattern} .................................
Q_STATE_DEF(Arena, PlayingPattern) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Arena::SM::ArenaOn::PlayingPattern}
        case Q_EXIT_SIG: {
            FSP::Arena_endPlayingPattern(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}

//${AOs::Arena::SM::ArenaOn::ShowingPatternFrame} ............................
Q_STATE_DEF(Arena, ShowingPatternFrame) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Arena::SM::ArenaOn::ShowingPatternFrame}
        case Q_EXIT_SIG: {
            FSP::Arena_endShowPatternFrame(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&ArenaOn);
            break;
        }
    }
    return status_;
}

} // namespace AC
//$enddef${AOs::Arena} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

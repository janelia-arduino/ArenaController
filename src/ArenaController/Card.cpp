//$file${./ArenaControlle~::Card.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::Card.cpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${./ArenaControlle~::Card.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "Card.hpp"


using namespace QP;

//============================================================================
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${Shared::Card_getInstance} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${Shared::Card_getInstance} ................................................
QP::QHsm * Card_getInstance() {
    return &Card::instance;
}

} // namespace AC
//$enddef${Shared::Card_getInstance} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the HSM
//$define${AOs::Card} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${AOs::Card} ...............................................................
Card Card::instance;

//${AOs::Card::Card} .........................................................
Card::Card()
  : QHsm(&initial)
{}

//${AOs::Card::SM} ...........................................................
Q_STATE_DEF(Card, initial) {
    //${AOs::Card::SM::initial}
    FSP::Card_initialize(this, e);

    QS_FUN_DICTIONARY(&Card::Initialized);
    QS_FUN_DICTIONARY(&Card::WaitingToFindCard);
    QS_FUN_DICTIONARY(&Card::FindingCard);
    QS_FUN_DICTIONARY(&Card::FileOpened);
    QS_FUN_DICTIONARY(&Card::CheckingFile);
    QS_FUN_DICTIONARY(&Card::CheckingPattern);
    QS_FUN_DICTIONARY(&Card::DisplayingPattern);

    return tran(&Initialized);
}

//${AOs::Card::SM::Initialized} ..............................................
Q_STATE_DEF(Card, Initialized) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Card::SM::Initialized::initial}
        case Q_INIT_SIG: {
            status_ = tran(&WaitingToFindCard);
            break;
        }
        //${AOs::Card::SM::Initialized::PLAY_PATTERN}
        case PLAY_PATTERN_SIG: {
            FSP::Card_storePlayPatternParameters(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::SHOW_PATTERN_FRAME}
        case SHOW_PATTERN_FRAME_SIG: {
            FSP::Card_storeShowPatternFrameParameters(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::Card::SM::Initialized::WaitingToFindCard} ...........................
Q_STATE_DEF(Card, WaitingToFindCard) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Card::SM::Initialized::WaitingToFindCard}
        case Q_ENTRY_SIG: {
              QS_BEGIN_ID(USER_COMMENT, 3)
                QS_STR("WaitingToFindCard");
              QS_END()
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::WaitingToFindCar~::FIND_CARD_TIMEOUT}
        case FIND_CARD_TIMEOUT_SIG: {
              QS_BEGIN_ID(USER_COMMENT, 3)
                QS_STR("FIND_CARD_TIMEOUT");
              QS_END()
            status_ = tran(&FindingCard);
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}

//${AOs::Card::SM::Initialized::FindingCard} .................................
Q_STATE_DEF(Card, FindingCard) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Card::SM::Initialized::FindingCard}
        case Q_ENTRY_SIG: {
            FSP::Card_findCard(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::FindingCard::CARD_NOT_FOUND}
        case CARD_NOT_FOUND_SIG: {
            FSP::Card_postAllOff(this, e);
            status_ = tran(&WaitingToFindCard);
            break;
        }
        //${AOs::Card::SM::Initialized::FindingCard::CARD_FOUND}
        case CARD_FOUND_SIG: {
            status_ = tran(&FileOpened);
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}

//${AOs::Card::SM::Initialized::FileOpened} ..................................
Q_STATE_DEF(Card, FileOpened) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Card::SM::Initialized::FileOpened}
        case Q_ENTRY_SIG: {
            FSP::Card_openFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::FileOpened}
        case Q_EXIT_SIG: {
            FSP::Card_closeFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::FileOpened::initial}
        case Q_INIT_SIG: {
            status_ = tran(&CheckingFile);
            break;
        }
        //${AOs::Card::SM::Initialized::FileOpened::END_PLAYING_PATTERN}
        case END_PLAYING_PATTERN_SIG: {
            status_ = tran(&WaitingToFindCard);
            break;
        }
        //${AOs::Card::SM::Initialized::FileOpened::END_SHOWING_PATTERN_FRAME}
        case END_SHOWING_PATTERN_FRAME_SIG: {
            status_ = tran(&WaitingToFindCard);
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}

//${AOs::Card::SM::Initialized::FileOpened::CheckingFile} ....................
Q_STATE_DEF(Card, CheckingFile) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Card::SM::Initialized::FileOpened::CheckingFile}
        case Q_ENTRY_SIG: {
            FSP::Card_checkFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::FileOpened::CheckingFile::FILE_NOT_VALID}
        case FILE_NOT_VALID_SIG: {
            FSP::Card_postAllOff(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::FileOpened::CheckingFile::FILE_VALID}
        case FILE_VALID_SIG: {
            status_ = tran(&CheckingPattern);
            break;
        }
        default: {
            status_ = super(&FileOpened);
            break;
        }
    }
    return status_;
}

//${AOs::Card::SM::Initialized::FileOpened::CheckingPattern} .................
Q_STATE_DEF(Card, CheckingPattern) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Card::SM::Initialized::FileOpened::CheckingPattern}
        case Q_ENTRY_SIG: {
            FSP::Card_checkPattern(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::FileOpened::CheckingPattern::PATTERN_NOT_VALID}
        case PATTERN_NOT_VALID_SIG: {
            FSP::Card_postAllOff(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Card::SM::Initialized::FileOpened::CheckingPattern::PATTERN_VALID}
        case PATTERN_VALID_SIG: {
            status_ = tran(&DisplayingPattern);
            break;
        }
        default: {
            status_ = super(&FileOpened);
            break;
        }
    }
    return status_;
}

//${AOs::Card::SM::Initialized::FileOpened::DisplayingPattern} ...............
Q_STATE_DEF(Card, DisplayingPattern) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&FileOpened);
            break;
        }
    }
    return status_;
}

} // namespace AC
//$enddef${AOs::Card} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

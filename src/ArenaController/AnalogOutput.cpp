//$file${./ArenaControlle~::AnalogOutput.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::AnalogOutput.cpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${./ArenaControlle~::AnalogOutput.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "AnalogOutput.hpp"


using namespace QP;

//============================================================================
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${Shared::AnalogOutput_getInstance} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${Shared::AnalogOutput_getInstance} ........................................
QP::QHsm * AnalogOutput_getInstance() {
    return &AnalogOutput::instance;
}

} // namespace AC
//$enddef${Shared::AnalogOutput_getInstance} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the HSM
//$define${AOs::AnalogOutput} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${AOs::AnalogOutput} .......................................................
AnalogOutput AnalogOutput::instance;

//${AOs::AnalogOutput::AnalogOutput} .........................................
AnalogOutput::AnalogOutput()
  : QHsm(&initial)
{}

//${AOs::AnalogOutput::SM} ...................................................
Q_STATE_DEF(AnalogOutput, initial) {
    //${AOs::AnalogOutput::SM::initial}
    FSP::AnalogOutput_initialize(this, e);

    QS_FUN_DICTIONARY(&AnalogOutput::Uninitialized);
    QS_FUN_DICTIONARY(&AnalogOutput::Initialized);

    return tran(&Uninitialized);
}

//${AOs::AnalogOutput::SM::Uninitialized} ....................................
Q_STATE_DEF(AnalogOutput, Uninitialized) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::AnalogOutput::SM::Uninitialized::ANALOG_OUTPUT_INITIALIZED}
        case ANALOG_OUTPUT_INITIALIZED_SIG: {
            status_ = tran(&Initialized);
            break;
        }
        //${AOs::AnalogOutput::SM::Uninitialized::INITIALIZE_ANALOG_OUTPUT}
        case INITIALIZE_ANALOG_OUTPUT_SIG: {
            FSP::AnalogOutput_initializeOutput(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::AnalogOutput::SM::Initialized} ......................................
Q_STATE_DEF(AnalogOutput, Initialized) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::AnalogOutput::SM::Initialized}
        case Q_ENTRY_SIG: {
            FSP::AnalogOutput_enterInitialized(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::AnalogOutput::SM::Initialized::SET_ANALOG_OUTPUT}
        case SET_ANALOG_OUTPUT_SIG: {
            FSP::AnalogOutput_setOutput(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

} // namespace AC
//$enddef${AOs::AnalogOutput} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

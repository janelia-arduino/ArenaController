//$file${./ArenaControlle~::Pattern.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${./ArenaControlle~::Pattern.cpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${./ArenaControlle~::Pattern.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "Pattern.hpp"


using namespace QP;

//============================================================================
// generate definition of to opaque pointer to the AO
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${Shared::AO_Pattern} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${Shared::AO_Pattern} ......................................................
QP::QActive * const AO_Pattern = &Pattern::instance;

} // namespace AC
//$enddef${Shared::AO_Pattern} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
// generate definition of the AO
//$define${AOs::Pattern} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${AOs::Pattern} ............................................................
Pattern Pattern::instance;

//${AOs::Pattern::Pattern} ...................................................
Pattern::Pattern()
: QActive(Q_STATE_CAST(&Pattern::initial)),
    frame_rate_time_evt_(this, FRAME_RATE_TIMEOUT_SIG, 0U),
    runtime_duration_time_evt_(this, RUNTIME_DURATION_TIMEOUT_SIG, 0U),
    initialize_card_time_evt_(this, INITIALIZE_CARD_TIMEOUT_SIG, 0U)
{}

//${AOs::Pattern::SM} ........................................................
Q_STATE_DEF(Pattern, initial) {
    //${AOs::Pattern::SM::initial}
    FSP::Pattern_initializeAndSubscribe(this, e);

    QS_FUN_DICTIONARY(&Pattern::Initialized);
    QS_FUN_DICTIONARY(&Pattern::Inactive);
    QS_FUN_DICTIONARY(&Pattern::FileOpened);
    QS_FUN_DICTIONARY(&Pattern::CheckingFile);
    QS_FUN_DICTIONARY(&Pattern::CheckingPattern);
    QS_FUN_DICTIONARY(&Pattern::PatternValid);
    QS_FUN_DICTIONARY(&Pattern::WaitingToDisplayFrame);
    QS_FUN_DICTIONARY(&Pattern::DisplayingFrame);
    QS_FUN_DICTIONARY(&Pattern::ReadingNextFrameFromFile);
    QS_FUN_DICTIONARY(&Pattern::FillingFrameBufferWithDecodedFrame);
    QS_FUN_DICTIONARY(&Pattern::DecodingFrame);
    QS_FUN_DICTIONARY(&Pattern::InitializingCard);

    return tran(&Initialized);
}

//${AOs::Pattern::SM::Initialized} ...........................................
Q_STATE_DEF(Pattern, Initialized) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::initial}
        case Q_INIT_SIG: {
            status_ = tran(&Inactive);
            break;
        }
        //${AOs::Pattern::SM::Initialized::DISPLAY_PATTERN}
        case DISPLAY_PATTERN_SIG: {
            FSP::Pattern_checkAndStoreParameters(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::Inactive} .................................
Q_STATE_DEF(Pattern, Inactive) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::Inactive::BEGIN_DISPLAYING_PATTERN}
        case BEGIN_DISPLAYING_PATTERN_SIG: {
            status_ = tran(&InitializingCard);
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened} ...............................
Q_STATE_DEF(Pattern, FileOpened) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened}
        case Q_ENTRY_SIG: {
            FSP::Pattern_openFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened}
        case Q_EXIT_SIG: {
            FSP::Pattern_closeFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::initial}
        case Q_INIT_SIG: {
            status_ = tran(&CheckingFile);
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::END_DISPLAYING_PATTERN}
        case END_DISPLAYING_PATTERN_SIG: {
            FSP::Pattern_deleteFrameReference(this, e);
            status_ = tran(&Inactive);
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened::CheckingFile} .................
Q_STATE_DEF(Pattern, CheckingFile) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened::CheckingFile}
        case Q_ENTRY_SIG: {
            FSP::Pattern_checkFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::CheckingFile::FILE_VALID}
        case FILE_VALID_SIG: {
            status_ = tran(&CheckingPattern);
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::CheckingFile::FILE_NOT_VALID}
        case FILE_NOT_VALID_SIG: {
            FSP::Pattern_postAllOff(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&FileOpened);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened::CheckingPattern} ..............
Q_STATE_DEF(Pattern, CheckingPattern) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened::CheckingPattern}
        case Q_ENTRY_SIG: {
            FSP::Pattern_checkPattern(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::CheckingPattern::PATTERN_VALID}
        case PATTERN_VALID_SIG: {
            status_ = tran(&PatternValid);
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::CheckingPattern::PATTERN_NOT_VALID}
        case PATTERN_NOT_VALID_SIG: {
            FSP::Pattern_postAllOff(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&FileOpened);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened::PatternValid} .................
Q_STATE_DEF(Pattern, PatternValid) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid}
        case Q_ENTRY_SIG: {
            FSP::Pattern_armTimers(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid}
        case Q_EXIT_SIG: {
            FSP::Pattern_disarmTimers(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::initial}
        case Q_INIT_SIG: {
            status_ = tran(&ReadingNextFrameFromFile);
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::FRAME_RATE_TIMEOUT}
        case FRAME_RATE_TIMEOUT_SIG: {
            FSP::Pattern_defer(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::RUNTIME_DURATION_TIMEOUT}
        case RUNTIME_DURATION_TIMEOUT_SIG: {
            FSP::Pattern_postAllOff(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&FileOpened);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::WaitingToDisplayFrame}
Q_STATE_DEF(Pattern, WaitingToDisplayFrame) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::WaitingToDisplayFrame}
        case Q_ENTRY_SIG: {
            FSP::Display_recall(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::WaitingToDisplay~::FRAME_RATE_TIMEOUT}
        case FRAME_RATE_TIMEOUT_SIG: {
            FSP::Pattern_deactivateDisplay(this, e);
            status_ = tran(&DecodingFrame);
            break;
        }
        default: {
            status_ = super(&PatternValid);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::DisplayingFrame}
Q_STATE_DEF(Pattern, DisplayingFrame) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::DisplayingFrame}
        case Q_ENTRY_SIG: {
            FSP::Pattern_displayFrame(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::DisplayingFrame::FRAME_TRANSFERRED}
        case FRAME_TRANSFERRED_SIG: {
            FSP::Pattern_deleteFrameReference(this, e);
            status_ = tran(&ReadingNextFrameFromFile);
            break;
        }
        default: {
            status_ = super(&PatternValid);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::ReadingNextFrameFromFile}
Q_STATE_DEF(Pattern, ReadingNextFrameFromFile) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::ReadingNextFrameFromFile}
        case Q_ENTRY_SIG: {
            FSP::Pattern_readNextFrameFromFile(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::ReadingNextFrame~::FRAME_READ_FROM_FILE}
        case FRAME_READ_FROM_FILE_SIG: {
            FSP::Pattern_saveFrameReference(this, e);
            status_ = tran(&WaitingToDisplayFrame);
            break;
        }
        default: {
            status_ = super(&PatternValid);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::FillingFrameBufferWithDecodedFra~}
Q_STATE_DEF(Pattern, FillingFrameBufferWithDecodedFrame) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::FillingFrameBufferWithDecodedFra~}
        case Q_ENTRY_SIG: {
            FSP::Pattern_fillFrameBufferWithDecodedFrame(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::FillingFrameBuff~::FRAME_FILLED}
        case FRAME_FILLED_SIG: {
            status_ = tran(&DisplayingFrame);
            break;
        }
        default: {
            status_ = super(&PatternValid);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::DecodingFrame} ..
Q_STATE_DEF(Pattern, DecodingFrame) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::DecodingFrame}
        case Q_ENTRY_SIG: {
            FSP::Pattern_decodeFrame(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::FileOpened::PatternValid::DecodingFrame::FRAME_DECODED}
        case FRAME_DECODED_SIG: {
            status_ = tran(&FillingFrameBufferWithDecodedFrame);
            break;
        }
        default: {
            status_ = super(&PatternValid);
            break;
        }
    }
    return status_;
}

//${AOs::Pattern::SM::Initialized::InitializingCard} .........................
Q_STATE_DEF(Pattern, InitializingCard) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Pattern::SM::Initialized::InitializingCard}
        case Q_ENTRY_SIG: {
            FSP::Pattern_armInitializeCardTimer(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::InitializingCard::CARD_FOUND}
        case CARD_FOUND_SIG: {
            status_ = tran(&FileOpened);
            break;
        }
        //${AOs::Pattern::SM::Initialized::InitializingCard::CARD_NOT_FOUND}
        case CARD_NOT_FOUND_SIG: {
            FSP::Pattern_postAllOff(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Pattern::SM::Initialized::InitializingCard::INITIALIZE_CARD_TIMEOUT}
        case INITIALIZE_CARD_TIMEOUT_SIG: {
            FSP::Pattern_initializeCard(this, e);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&Initialized);
            break;
        }
    }
    return status_;
}

} // namespace AC
//$enddef${AOs::Pattern} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$file${.::Arena.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${.::Arena.hpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::Arena.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef ARENA_HPP
#define ARENA_HPP

#include "Shared.hpp"
#include "Events.hpp"
#include "fsp.hpp"


//============================================================================
// generate declaration of the active object
//$declare${AOs::Arena} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${AOs::Arena} ..............................................................
class Arena : public QP::QActive {
public:
    static Arena instance;
    QP::QTimeEvt initialize_analog_time_evt_;
    QP::QHsm * analog_output_;
    QP::QHsm * analog_input_;
    QP::QTimeEvt analog_input_time_evt_;

public:
    Arena();

private:
    void dispatchToAnalogOutput(QP::QEvt const * e);
    void dispatchToAnalogInput(QP::QEvt const * e);

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(ArenaOn);
    Q_STATE_DECL(AllOn);
    Q_STATE_DECL(AllOff);
    Q_STATE_DECL(StreamingFrame);
    Q_STATE_DECL(PlayingPattern);
    Q_STATE_DECL(ShowingPatternFrame);
    Q_STATE_DECL(AnalogClosedLoop);
}; // class Arena

} // namespace AC
//$enddecl${AOs::Arena} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif

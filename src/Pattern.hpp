//$file${.::Pattern.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ArenaController.qm
// File:  ${.::Pattern.hpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::Pattern.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef PATTERN_HPP
#define PATTERN_HPP

#include "Shared.hpp"
#include "Events.hpp"
#include "fsp.hpp"


//============================================================================
// generate declaration of the active object
//$declare${AOs::Pattern} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace AC {

//${AOs::Pattern} ............................................................
class Pattern : public QP::QActive {
public:
    static Pattern instance;
    QP::QTimeEvt frame_rate_time_evt_;
    std::uint16_t frame_rate_hz_;
    std::uint16_t runtime_duration_ms_;
    QP::QTimeEvt runtime_duration_time_evt_;
    std::uint64_t byte_count_per_frame_;
    QP::QEQueue frame_rate_queue_;
    bool positive_direction_;
    QP::QTimeEvt find_card_time_evt_;
    FrameEvt const * frame_;
    std::uint16_t frame_count_per_pattern_;
    std::uint16_t frame_index_;
    QP::QHsm * card_;
    std::uint8_t grayscale_;

public:
    Pattern();

private:
    void dispatchToCard(QP::QEvt const * e);

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(Initialized);
    Q_STATE_DECL(Inactive);
    Q_STATE_DECL(DisplayingPattern);
    Q_STATE_DECL(WaitingToPlayPattern);
    Q_STATE_DECL(ShowingPatternFrame);
    Q_STATE_DECL(WaitingToShowPatternFrame);
    Q_STATE_DECL(PlayingPattern);
    Q_STATE_DECL(DecodingFrame);
    Q_STATE_DECL(DisplayingFrame);
    Q_STATE_DECL(WaitingToDisplayFrame);
    Q_STATE_DECL(FillingFrameBufferWithDecodedFrame);
    Q_STATE_DECL(ReadingFrameFromFile);
}; // class Pattern

} // namespace AC
//$enddecl${AOs::Pattern} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif

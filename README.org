#+TITLE: ArenaController
#+AUTHOR: Peter Polidoro
#+EMAIL: peter@polidoro.io

* Library Information
- Name: ArenaController
- Description:  Arduino library for communicating with the Reiser Lab Modular LED panels display arena.
- Version: 0.2.0
- Panel Version: G4 v1.9
- Release Date: 2023-08-25
- Creation Date: 2023-08-16
- License: BSD-3-Clause
- URL: https://github.com/janelia-arduino/ArenaController
- Author: Peter Polidoro
- Email: peter@polidoro.io
- Copyright: 2023 Howard Hughes Medical Institute
- References:
  - https://reiserlab.github.io/Modular-LED-Display/
  - https://www.pjrc.com/store/teensy41.html
  - https://www.pjrc.com/store/ethernet_kit.html
  - https://github.com/vjmuzik/NativeEthernet

* Arena

** System Components

*** Quarter Panel

A quarter panel is a set of LED pixels arranged in rows and columns.

#+html: <img src="./images/quarter_panel.png" width="96px">

*** Panel

A panel is a set of quarter panels arranged in rows and columns.

#+html: <img src="./images/panel.png" width="192px">

*** Region

A region is a set of panels arranged in rows and columns with a common communication interface.

#+html: <img src="./images/region.png" width="607px">

*** Display

An display is a set of regions arranged in rows and columns.

#+html: <img src="./images/display.png" width="1214px">

** Display Messages

*** Quarter Panel

**** Pixels

Pixel numbering for each pixel in a quarter panel:

#+html: <img src="./images/quarter_panel_pixels.png" width="1200px">

**** Grayscale

In grayscale mode, each LED can be one of sixteen brightness levels.

#+html: <img src="./images/grayscale.png" width="420px">

#+html: <img src="./images/quarter_panel_grayscale.png" width="1200px">

***** Example Quarter Panel Message Grayscale All On

#+BEGIN_SRC cpp
constexpr uint8_t all_on[constants::byte_count_per_quarter_panel_grayscale] =
{
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255
};
#+END_SRC

**** Binary

In binary mode, each LED can be one of two brightness levels, on or off.

#+html: <img src="./images/binary.png" width="420px">

#+html: <img src="./images/quarter_panel_binary.png" width="1200px">

***** Example Quarter Panel Message Binary All On

#+BEGIN_SRC cpp
constexpr uint8_t all_on[constants::byte_count_per_quarter_panel_binary] =
{
  1,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255
};
#+END_SRC

*** Panel

**** Quarter Panels in Panel

Quarter panel numbering for each quarter panel in a panel plus pixel numbering for select pixels in a panel:

#+html: <img src="./images/panel_quarter_panels.png" width="1200px">

*** Example Panel Messages

***** Grayscale All On

#+BEGIN_SRC cpp
constexpr uint8_t all_on[constants::byte_count_per_panel_grayscale] =
{
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  1,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255,
  255, 255, 255, 255
};
#+END_SRC

***** Binary All On

#+BEGIN_SRC cpp
constexpr uint8_t all_on[constants::byte_count_per_panel_binary] =
{
  1,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255
};
#+END_SRC


*** Region

**** Regions in Display

Region numbering for each region in an display:

#+html: <img src="./images/display_regions.png" width="1200px">

**** Panels in Region

Panel numbering for each panel in an region:

#+html: <img src="./images/region_panels.png" width="600px">

*** Display

**** Panels in Display

Panel update order for each panel in an display:

***** Synchronous

#+html: <img src="./images/display_panels_synchronous.png" width="1200px">

***** Asynchronous

#+html: <img src="./images/display_panels_asynchronous.png" width="1200px">

* Development

** Download this repository

[[https://github.com/janelia-arduino/ArenaController.git]]

#+BEGIN_SRC sh
sudo apt install -y git
mkdir -p ~/tmp && cd ~/tmp && git clone https://github.com/janelia-arduino/ArenaController.git
#+END_SRC

** PlatformIO

*** Install PlatformIO Core

[[https://docs.platformio.org/en/latest/core/installation/index.html]]

**** Example

#+BEGIN_SRC sh
sudo apt install -y python3-venv make
cd ~/tmp/ArenaController
make venv
#+END_SRC

**** 99-platformio-udev.rules

Linux users have to install udev rules for PlatformIO supported boards/devices.

***** Download udev rules file to /etc/udev/rules.d

#+BEGIN_SRC sh
curl -fsSL https://raw.githubusercontent.com/platformio/platformio-core/develop/platformio/assets/system/99-platformio-udev.rules | sudo tee /etc/udev/rules.d/99-platformio-udev.rules
#+END_SRC

***** Restart udev management tool

#+BEGIN_SRC sh
sudo service udev restart
#+END_SRC

***** Add user to groups

#+BEGIN_SRC sh
sudo usermod -a -G dialout $USER
sudo usermod -a -G plugdev $USER
#+END_SRC

***** Remove modemmanager

#+BEGIN_SRC sh
sudo apt-get purge --auto-remove modemmanager
#+END_SRC

*** Compile the firmware

#+BEGIN_SRC sh
cd ~/tmp/ArenaController
make firmware
#+END_SRC

*** Upload the firmware

#+BEGIN_SRC sh
cd ~/tmp/ArenaController
make upload
#+END_SRC

*** Monitor

#+BEGIN_SRC sh
cd ~/tmp/ArenaController
make monitor
#+END_SRC
